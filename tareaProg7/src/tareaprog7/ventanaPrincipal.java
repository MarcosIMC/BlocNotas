/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tareaprog7;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Caret;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Marcos
 */
public class ventanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form ventanaPrincipal
     */
    public ventanaPrincipal() {
        
    /*
        Este metodo ha sido creado para que nos salga el mensaje en caso de tener texto
        cuando pulsamos en la "X" de la ventana evitando asi que se nos cierre el 
        programa
        */
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        
        addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
        //Inicia los componentes
      initComponents();
      //Aqui llamamos al metodo "Undo"
      undo();
    }
        
       
        private void close() {
             //Creamos el objeto de la clase JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //Si el campo tiene algo escrito
        if (!"".equals(campoTexto.getText())){
            //Sale un mensaje diciendo si queremos guardarlo
            int confirmado = JOptionPane.showConfirmDialog(opcionNuevo,
            "Â¿Quiere guardar los datos actuales?");
            //Si le damos a si
            if (JOptionPane.OK_OPTION == confirmado){
                //Nos carga la opcion de guardar
                if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(opcionGuardar)) {
                    //Lo encapsulamos en la variable archivo
                File archivo = fileChooser.getSelectedFile();
                //La variable escritor para escribir los datos
                FileWriter escritor = null;
                    try {
                        //escritor contendra el archivo
                        escritor = new FileWriter(archivo);
                        //coje el texto del textarea y lo escribe
                        escritor.write(campoTexto.getText());
                        
                        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
                        fileChooser.setFileFilter(filtro);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            //cerramos el escritor
                            escritor.close();
                            //lo ponemos en blanco
                            System.exit(0);
                        } catch (IOException ex) {
                            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }  else{
                if(JOptionPane.NO_OPTION == confirmado)
                //En caso de darle no nos lo pone en blanco
                System.exit(0);
                }    
        }else {//En caso de no tener nada escrito, sale
            System.exit(0);
        }
        }     

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        campoTexto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        opcionGuardarComo = new javax.swing.JMenuItem();
        imprimir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        opccionSalir = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        copiar = new javax.swing.JMenuItem();
        cortar = new javax.swing.JMenuItem();
        pegar = new javax.swing.JMenuItem();
        opcionFecha = new javax.swing.JMenuItem();
        opcionSelecTodo = new javax.swing.JMenuItem();
        opcionEliminar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        opcionBloc = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        campoTexto.setColumns(20);
        campoTexto.setRows(5);
        jScrollPane1.setViewportView(campoTexto);

        menuArchivo.setText("Archivo");

        opcionNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        opcionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460440996_document-new.png"))); // NOI18N
        opcionNuevo.setText("Nuevo");
        opcionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNuevo);

        opcionAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441020_document-open.png"))); // NOI18N
        opcionAbrir.setText("Abrir");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460440948_floppy.png"))); // NOI18N
        opcionGuardar.setText("Guardar");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardar);

        opcionGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441057_Save-as.png"))); // NOI18N
        opcionGuardarComo.setText("Guardar como...");
        opcionGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardarComo);

        imprimir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460580735_print_printer.png"))); // NOI18N
        imprimir.setText("Imprimir");
        imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirActionPerformed(evt);
            }
        });
        menuArchivo.add(imprimir);
        menuArchivo.add(jSeparator1);

        opccionSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441085_Exit.png"))); // NOI18N
        opccionSalir.setText("Salir");
        opccionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opccionSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(opccionSalir);

        jMenuBar1.add(menuArchivo);

        menuEditar.setText("Editar");

        copiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441108_BT_copy.png"))); // NOI18N
        copiar.setText("Copiar");
        copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarActionPerformed(evt);
            }
        });
        menuEditar.add(copiar);

        cortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441126_Cut.png"))); // NOI18N
        cortar.setText("Cortar");
        cortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortarActionPerformed(evt);
            }
        });
        menuEditar.add(cortar);

        pegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pegar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460441172_page_paste.png"))); // NOI18N
        pegar.setText("Pegar");
        pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegarActionPerformed(evt);
            }
        });
        menuEditar.add(pegar);

        opcionFecha.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        opcionFecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460669778_config-date.png"))); // NOI18N
        opcionFecha.setText("Hora y Fecha");
        opcionFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionFechaActionPerformed(evt);
            }
        });
        menuEditar.add(opcionFecha);

        opcionSelecTodo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        opcionSelecTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460751030_Gnome-Edit-Select-All-32.png"))); // NOI18N
        opcionSelecTodo.setText("Seleccionar el texto");
        opcionSelecTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSelecTodoActionPerformed(evt);
            }
        });
        menuEditar.add(opcionSelecTodo);

        opcionEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        opcionEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460750929_trash.png"))); // NOI18N
        opcionEliminar.setText("Eliminar");
        opcionEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionEliminarActionPerformed(evt);
            }
        });
        menuEditar.add(opcionEliminar);

        jMenuBar1.add(menuEditar);

        jMenu1.setText("Acerda de");

        opcionBloc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1460756945_gnome-sticky-notes-applet.png"))); // NOI18N
        opcionBloc.setText("Bloc de notas Marcos");
        opcionBloc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionBlocActionPerformed(evt);
            }
        });
        jMenu1.add(opcionBloc);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarActionPerformed
        // TODO add your handling code here:
        //para copiar el texto seleccionado
        campoTexto.copy();
    }//GEN-LAST:event_copiarActionPerformed

    private void cortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortarActionPerformed
        // TODO add your handling code here:
        //Para cortar el texto seleccionado
        campoTexto.cut();
    }//GEN-LAST:event_cortarActionPerformed

    private void pegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarActionPerformed
        // TODO add your handling code here:
        //Para pegar el texto seleccionado
        campoTexto.paste();
    }//GEN-LAST:event_pegarActionPerformed

    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        // TODO add your handling code here:
        //Metodo para la opcion de abrir
        
        //Creamos el objeto de la clase JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //Si el campo es diferencte a vacÃ­o
        if (!"".equals(campoTexto.getText())){
            //Sale un mensaje diciendo si queremos guardarlo
            int confirmado = JOptionPane.showConfirmDialog(opcionNuevo,
            "Â¿Quiere guardar los datos actuales?");
            //Si le damos a si
            if (JOptionPane.OK_OPTION == confirmado){
                //Nos carga la opcion de guardar
                if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(opcionGuardar)) {
                    //Lo encapsulamos en la variable archivo
                File archivo = fileChooser.getSelectedFile();
                //La variable escritor para escribir los datos
                FileWriter escritor = null;
                    try {
                        //escritor contendra el archivo
                        escritor = new FileWriter(archivo);
                        //coje el texto del textarea y lo escribe
                        escritor.write(campoTexto.getText());
                        
                        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
                        fileChooser.setFileFilter(filtro);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            //cerramos el escritor
                            escritor.close();
                            //lo ponemos en blanco
                            campoTexto.setText("");
                        } catch (IOException ex) {
                            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }  else{
                if(JOptionPane.NO_OPTION == confirmado)
                //En caso de darle no nos lo pone en blanco
                campoTexto.setText("");
                }    
        }
        
        
    }//GEN-LAST:event_opcionNuevoActionPerformed

    private void opccionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opccionSalirActionPerformed
        // TODO add your handling code here:
         //Creamos el objeto de la clase JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //Si el campo tiene algo escrito
        if (!"".equals(campoTexto.getText())){
            //Sale un mensaje diciendo si queremos guardarlo
            int confirmado = JOptionPane.showConfirmDialog(opcionNuevo,
            "Â¿Quiere guardar los datos actuales?");
            //Si le damos a si
            if (JOptionPane.OK_OPTION == confirmado){
                //Nos carga la opcion de guardar
                if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(opcionGuardar)) {
                    //Lo encapsulamos en la variable archivo
                File archivo = fileChooser.getSelectedFile();
                //La variable escritor para escribir los datos
                FileWriter escritor = null;
                    try {
                        //escritor contendra el archivo
                        escritor = new FileWriter(archivo);
                        //coje el texto del textarea y lo escribe
                        escritor.write(campoTexto.getText());
                        
                        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
                        fileChooser.setFileFilter(filtro);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            //cerramos el escritor
                            escritor.close();
                            //lo ponemos en blanco
                            System.exit(0);
                        } catch (IOException ex) {
                            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }  else{
                if(JOptionPane.NO_OPTION == confirmado)
                //En caso de darle no nos lo pone en blanco
                System.exit(0);
                }    
        }else {//En caso de no tener nada escrito, sale
            System.exit(0);
        }
        
    }//GEN-LAST:event_opccionSalirActionPerformed

    private void imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirActionPerformed
        try {
            // TODO add your handling code here:
            //Para que salga la ventana de imprimir
            campoTexto.print();
        } catch (PrinterException ex) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirActionPerformed

    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        // TODO add your handling code here:
        //Creamos el fileChooser para poder abrir las ventanas
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //Si clicamos en el boton de "Abrir" (opcionAbrir) se nos abre la ventana con la opcion openDialog
        if (JFileChooser.APPROVE_OPTION == fileChooser.showOpenDialog(opcionAbrir)){
            File archivo = fileChooser.getSelectedFile();
            FileReader lector = null;
            try{
                //Creamos la variable "lector" para poder leer el archivo y mostrarlo
                lector = new FileReader (archivo);
                BufferedReader buffer = new BufferedReader (lector);
                
                String lineaFichero;
                StringBuilder contenidoFichero = new StringBuilder();
                
                //recuperar el contenido del fichero
                while ((lineaFichero = buffer.readLine()) != null){
                    contenidoFichero.append(lineaFichero);
                    contenidoFichero.append("\n");
                }
                //Pone el contenido del fichero en el area de texto
              campoTexto.setText(contenidoFichero.toString());
              lector.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        // TODO add your handling code here:
        //Creamos el fileChooser 
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    
    //Si clica en "Guardar" (opcionGuardar) se nos abre el dialogo para guardar 
    if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(opcionGuardar)) {
        File archivo = fileChooser.getSelectedFile();
        //Creamos la variable "escritor" para poder escribir los datos
        FileWriter escritor = null;
        try {
            //encapsulamos el archivo dentro del escritor
            escritor = new FileWriter(archivo);
            //escritor va a escribir todo loque coja dentro del campoTexto (el textarea)
            escritor.write(campoTexto.getText());
            
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
            fileChooser.setFileFilter(filtro);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                //cerramos el escritor
                escritor.close();
            } catch (IOException ex) {
                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    private void opcionGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarComoActionPerformed
        // TODO add your handling code here:
        /*Esta opcion es la misma que la que usamos en el metodo de
          guardar, la explicaion es la misma
        */
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(opcionGuardar)) {
            File archivo = fileChooser.getSelectedFile();
            FileWriter escritor = null;
            try {
                escritor = new FileWriter(archivo);
                escritor.write(campoTexto.getText());

                FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
                fileChooser.setFileFilter(filtro);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    escritor.close();
                } catch (IOException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }
    }//GEN-LAST:event_opcionGuardarComoActionPerformed

    private void opcionFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionFechaActionPerformed
        // TODO add your handling code here:
        //Creamos la variable fecha la cual nos dara la fecha y hora
        //Ya que viene del paquete Date
        java.util.Date fecha = new Date();
        
        //En esta variable texto, guardamos todo el contenido del campoTexto
        String texto = campoTexto.getText();
        
        /*
        En campoTexto mostramos el contenido de fecha con dos saltos de linea
        y mostramos el texto que teniamos escrito
        */
        campoTexto.setText(fecha+"\n"+"\n"+texto);
    }//GEN-LAST:event_opcionFechaActionPerformed

    private void opcionSelecTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSelecTodoActionPerformed
        // TODO add your handling code here:
       //Con selectAll, estamos diciendo que seleccionemos todo el texto
      campoTexto.selectAll();
    }//GEN-LAST:event_opcionSelecTodoActionPerformed

    private void opcionEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionEliminarActionPerformed
        // TODO add your handling code here:
        /*
        Con esta opcion lo que haremos sera sustituir lo seleccionado por 
        espacios en blanco, simulando asi que lo hemos borrado
        */
        campoTexto.replaceSelection("");
    }//GEN-LAST:event_opcionEliminarActionPerformed

    private void opcionBlocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionBlocActionPerformed
        // TODO add your handling code here:
        /*
        Aqui llamamos al JDialog usado para mostrar el texto escrito en 
        "acercaDe.txt" donde explico las funciones del programa
        */
        (new blocNotasMarcos (this,true)).setVisible(true);
        
        
    }//GEN-LAST:event_opcionBlocActionPerformed

    //Estos metodos son para deshacer con Ctrl+Z y para rehacer con Ctrl+Y
    private void undo(){
        final UndoManager undo = new UndoManager();
        Document doc = campoTexto.getDocument();

        // Listen for undo and redo events
        doc.addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent evt) {
                undo.addEdit(evt.getEdit());
            }
        });

        // Create an undo action and add it to the text component
        campoTexto.getActionMap().put("Undo",
            new AbstractAction("Undo") {
                public void actionPerformed(ActionEvent evt) {
                    try {
                        if (undo.canUndo()) {
                            undo.undo();
                        }
                    } catch (CannotUndoException e) {
                    }
                }
           });

        // Bind the undo action to ctl-Z
        campoTexto.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");

        // Create a redo action and add it to the text component
        campoTexto.getActionMap().put("Redo",
            new AbstractAction("Redo") {
                public void actionPerformed(ActionEvent evt) {
                    try {
                        if (undo.canRedo()) {
                            undo.redo();
                        }
                    } catch (CannotRedoException e) {
                    }
                }
            });

        // Bind the redo action to ctl-Y
        campoTexto.getInputMap().put(KeyStroke.getKeyStroke("control Y"), "Redo");
    }
    
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea campoTexto;
    private javax.swing.JMenuItem copiar;
    private javax.swing.JMenuItem cortar;
    private javax.swing.JMenuItem imprimir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JMenuItem opccionSalir;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionBloc;
    private javax.swing.JMenuItem opcionEliminar;
    private javax.swing.JMenuItem opcionFecha;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionGuardarComo;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JMenuItem opcionSelecTodo;
    private javax.swing.JMenuItem pegar;
    // End of variables declaration//GEN-END:variables
}

